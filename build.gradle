plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.1.5'
	id "org.asciidoctor.jvm.convert" version "3.3.2"
	id 'com.epages.restdocs-api-spec' version '0.18.2'
	id 'org.hidetake.swagger.generator' version '2.19.2'
	id 'jacoco'
}

group = 'com.watermelon'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	//firebase
	implementation 'com.google.firebase:firebase-admin:9.2.0'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'io.findify:s3mock_2.13:0.2.6'

	implementation 'org.springframework.boot:spring-boot-starter-validation'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	//rest-docs -> openApi
	testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.18.2' //2.2
	swaggerUI 'org.webjars:swagger-ui:3.52.5'
	swaggerCodegen 'io.swagger.codegen.v3:swagger-codegen-cli:3.0.47'  // or Swagger Codegen V3

	//db
	implementation group: 'it.ozimov', name: 'embedded-redis', version: '0.7.1'
	runtimeOnly 'com.mysql:mysql-connector-j'
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.redisson:redisson-spring-boot-starter:3.24.3'

	ext {
		JJWT_VERSION = "0.12.3"
	}

	implementation "io.jsonwebtoken:jjwt-api:${JJWT_VERSION}"
	runtimeOnly "io.jsonwebtoken:jjwt-gson:${JJWT_VERSION}"
	runtimeOnly "io.jsonwebtoken:jjwt-impl:${JJWT_VERSION}"
}

tasks.named('test') {
	useJUnitPlatform()
}

bootJar {
	dependsOn 'openapi3'
	dependsOn 'customGenerateSwaggerUI'
	dependsOn 'copySwaggerUI'
}

//OpenAPI Spec 지정
openapi3 {
	title = 'Watermelon REST API'
	description = 'Watermelon API 문서입니다.'
	version = '0.1.0'
	servers = [ { url = 'http://localhost:8080' } ]
	format = 'yaml'
	contact = {
		name = 'watermelon'
		email = 'watermelon@gmail.com'
	}
}

// Swagger UI 파일 복사 태스크 등록
tasks.register('copySwaggerUI', Copy) {
	dependsOn jar
	dependsOn compileTestJava
	dependsOn test
	dependsOn customGenerateSwaggerUI
	dependsOn resolveMainClassName
	from("build/swagger-ui-watermelon")
	into("build/resources/main/static/docs")
}

tasks.register('customGenerateSwaggerUI', GenerateSwaggerUI) {
	dependsOn 'openapi3'
	inputFile = file('build/api-spec/openapi3.yaml')
	outputDir = file("build/swagger-ui-watermelon")
	wipeOutputDir = true
}

swaggerSources {
	watermelon {
		inputFile = file('build/api-spec/openapi3.yaml') //openapi3 파일 위치 지정
	}

}

//jacoco
test {
	finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
	dependsOn 'copySwaggerUI'
	reports {
		xml.required = false
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}

	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, excludes: [
							'**/*Application*',
							'**/*Exception*',
							'**/dto/**',
					])
				})
		)
	}
}

jacoco {
	toolVersion = "0.8.11"
	reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}
