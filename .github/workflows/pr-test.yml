name: Deploy

on:
  pull_request:
    branches: [WB-115-api-server] # master branch에 PR을 보낼 때 실행
  push:
    branches: [WB-115-api-server] # master branch에 PR을 보낼 때 실행

jobs:
  test:
    runs-on: ubuntu-latest

#    services:
#      redis:
#        image: redis:6.x
#        ports:
#          - 6379:6379
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17


      - name: Set YML
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_LOCAL}}" | base64 --decode > src/main/resources/application-local.yml
          echo "${{ secrets.APPLICATION_LOCAL_DB }}" | base64 --decode > src/main/resources/application-local-db.yml
          echo "${{ secrets.APPLICATION_LOCAL_TOKEN }}" | base64 --decode > src/main/resources/application-local-token.yml
          echo "${{ secrets.FIREBASE }}" | base64 --decode > firebase.json
          find src

      # Gradle wrapper 파일 실행 권한주기
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Gradle test를 실행한다
      - name: Test with Gradle
        run: ./gradlew --info test

      # 테스트 후 Result를 보기위해 Publish Unit Test Results step 추가
      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: ${{ always() }}  # 테스트가 실패하여도 Report를 보기 위해 `always`로 설정
        with:
          files: build/test-results/**/*.xml

      - name: 🔧 Build Spring server
        run: |
          chmod +x ./gradlew
          ./gradlew clean build 
          ls -al    

      - name: Docker build
        run: |
          cd /home/runner/work/Team5-WatermelonClap-BE/Team6-WatermelonClap-BE
          ls -al



#  deploy:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - name: Set up JDK 17
#        uses: actions/setup-java@v1
#        with:
#          java-version: 17
#
#      - name: 💾 Cache Gradle & Spring
#        uses: actions/cache@v3
#        with:
#            path: |
#              ~/.gradle/caches
#              ~/.gradle/wrapper
#            key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#            restore-keys: |
#              ${{ runner.os }}-gradle-
#
#      - name: Set YML
#        run: |
#          mkdir -p src/main/resources
#          echo "${{ secrets.DEPLOY_DB }}" | base64 --decode > src/main/resources/application-deploy-db.yml
#          echo "${{ secrets.DEPLOY_JWT_TOKEN }}" | base64 --decode > src/main/resources/application-local-token.yml
#          echo "${{ secrets.FIREBASE }}" | base64 --decode > firebase.json
#          find src
#
#
#      - name: Grant execute permission for gradlew
#        run: chmod +x gradlew
#
#            # Gradle test를 실행한다
#      - name: Test with Gradle
#        run: ./gradlew --info test
#
#
#      - name: 🔧 Build Spring server
#        run: |
#          chmod +x ./gradlew
#          ./gradlew clean build
#          ls -al